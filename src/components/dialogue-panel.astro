---
import type { StateOptions } from "../lib/client/gameState";

interface Props extends Partial<StateOptions> {
    // debug?: boolean;
}

const { ...stateOptions } = Astro.props;
---

<div
    class="content content-width"
    data-content
    data-state-options={JSON.stringify(stateOptions)}
>
</div>
<style>
    .content {
        padding: 4rem 0;

        p.text {
            line-height: 1.4;

            /* these are words */
            & > * {
                display: inline-flex;
                white-space: pre;

                & > * {
                    display: inline-block;

                    span& {
                        animation: letter-enter 0.5s 1;
                    }

                    em& {
                        animation: italic-letter-enter 0.5s 1;
                    }

                    strong& {
                        animation: bold-letter-enter 0.5s 1;
                    }
                }
            }
        }

        .choice {
            --choice-unit: 2px;
            padding-bottom: calc(var(--choice-unit) * 4);
            padding-top: calc(var(--choice-unit) * 4);
            margin-bottom: calc(var(--choice-unit) * 2);
            border-top: var(--choice-unit) solid var(--text-color);

            box-sizing: border-box;

            &::before {
                content: attr(data-choice-key) ".";
                padding-right: 0.5em;
                padding-left: 0.2em;
            }

            p&,
            button&:first-of-type {
                margin-top: 3rem;
            }

            /* chocies that have already been made */
            p& {
                opacity: 0.5;

                &::before {
                    opacity: 0.5;
                }
            }

            /* choices that can be made */
            button& {
                display: block;
                width: 100%;

                cursor: pointer;

                &:hover:not(:active) {
                    color: var(--bg-color);
                    background-color: var(--text-color);
                }

                &.visited {
                    opacity: 0.5;
                }
            }
        }
    }

    @keyframes letter-enter {
        0% {
            opacity: 0;
            transform: translate(-1px, 1px) rotate(10deg);
        }

        100% {
            opacity: 1;
            transform: translate(0, 0) rotate(0);
        }
    }

    @keyframes italic-letter-enter {
        0% {
            opacity: 0;
            transform: translate(-3px, 3px) rotate(12deg);
        }

        60% {
            opacity: 1;
            transform: translate(1.5px, -1.5px) rotate(-8deg);
        }

        100% {
            transform: translate(0, 0) rotate(0);
        }
    }

    @keyframes bold-letter-enter {
        0% {
            opacity: 0;
            transform: translate(-2px, -2px) scale(1.5) rotate(10deg);
        }

        40% {
            transform: translate(1px, 0.5px) scale(1.5) rotate(10deg);
        }

        60% {
            transform: translate(-0.5px, 0) scale(0.9) rotate(-2deg);
        }

        100% {
            opacity: 1;
            transform: translate(0, 0) scale(1);
        }
    }
</style>
<script>
    import {
        GameDriver,
        type IChoiceContainer,
        type IContentContainer,
    } from "../lib/client/gameDriver";
    import { LocalStorageSaveStore } from "../lib/client/saveStore";
    import { HTTPSceneStore } from "../lib/client/sceneStore";
    import {
        GameState,
        type StateOptions,
    } from "../lib/client/gameState";

    function initDialogueColumn() {
        const content = document.querySelector("[data-content]") as HTMLElement;
        const options = (
            content.dataset.stateOptions
                ? JSON.parse(content.dataset.stateOptions)
                : {}
        ) as Partial<StateOptions>;

        const contentContainer: IContentContainer = {
            clear: () => (content.innerHTML = ""),
            add: (el) => content.appendChild(el),
            scrollToEnd: () => {},
        };

        const choiceContainer: IChoiceContainer = {
            ...contentContainer,
            clear: () => {
                content
                    .querySelectorAll("button.choice")
                    .forEach((n) => n.remove());
            },
        };

        const state = new GameState(new LocalStorageSaveStore(window.localStorage), options);
        const renderer = new GameDriver({
            contentContainer,
            choiceContainer,
            state,
            sceneStore: new HTTPSceneStore(),
        });

        renderer.begin();
    }

    document.addEventListener("DOMContentLoaded", initDialogueColumn);
</script>
