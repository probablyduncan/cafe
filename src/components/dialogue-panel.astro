---
import type { StateOptions } from "../lib/client/state";

interface Props extends Partial<StateOptions> {
    // debug?: boolean;
}

const { ...stateOptions } = Astro.props;
---

<main class="wrapper">
    <div class="navbar">
        <nav class="content-width">
            <a href="/info" title="about this cafe">info</a>
            <a
                onclick="window.localStorage.removeItem('save-data'); window.location.reload()"
                href="#"
                title="restart">reset</a
            >
        </nav>
    </div>
    <div class="scroll-area">
        <div
            class="content content-width"
            data-content
            data-state-options={stateOptions}
        >
        </div>
    </div>
</main>
<style>
    .wrapper {
        position: relative;
        width: 100%;

        /* display: grid; */
        /* grid-template-rows: auto 1fr; */
    }

    .content-width {
        width: 65ch;
        max-width: 100%;
        margin: 0 auto;
    }

    .navbar {
        position: absolute;
        top: 0;
        width: 100%;

        background-image: linear-gradient(var(--bg-color) 0%, transparent 120%);
        backdrop-filter: blur(2px);

        padding: 0 1rem;
        box-sizing: border-box;

        nav {
            @include content-width;
            padding: 1rem 0;

            display: flex;
            justify-content: space-between;
            border-bottom: 2px solid var(--text-color);

            a {
                color: unset;
                text-decoration: none;
                font-style: italic;

                &:hover {
                    text-decoration: underline dotted;
                }
            }
        }
    }

    .scroll-area {
        overflow-y: scroll;
        width: 100%;
        display: flex;
        flex-direction: column-reverse;

        max-height: 100svh;
        padding: 0 1rem;
        box-sizing: border-box;

        .content {
            @include content-width;
            padding: 4rem 0;

            p.text {
                line-height: 1.4;

                /* these are words */
                & > * {
                    display: inline-flex;
                    white-space: pre;

                    & > * {
                        display: inline-block;

                        span& {
                            animation: letter-enter 0.5s 1;
                        }

                        em& {
                            animation: italic-letter-enter 0.5s 1;
                        }

                        strong& {
                            animation: bold-letter-enter 0.5s 1;
                        }
                    }
                }
            }

            .choice {
                --choice-unit: 2px;
                padding-bottom: calc(var(--choice-unit) * 4);
                padding-top: calc(var(--choice-unit) * 4);
                margin-bottom: calc(var(--choice-unit) * 2);
                border-top: var(--choice-unit) solid var(--text-color);

                box-sizing: border-box;

                &::before {
                    content: attr(data-choice-key) ".";
                    padding-right: 0.5em;
                    padding-left: 0.2em;
                }

                p&, button&:first-of-type {
                    margin-top: 3rem;
                }

                /* chocies that have already been made */
                p& {
                    opacity: 0.5;

                    &::before {
                        opacity: 0.5;
                    }
                }

                /* choices that can be made */
                button& {
                    display: block;
                    width: 100%;

                    cursor: pointer;

                    &:hover:not(:active) {
                        color: var(--bg-color);
                        background-color: var(--text-color);
                    }

                    &.visited {
                        opacity: 0.5;
                    }
                }
            }
        }
    }

    @keyframes letter-enter {
        0% {
            opacity: 0;
            transform: translate(-1px, 1px) rotate(10deg);
        }

        100% {
            opacity: 1;
            transform: translate(0, 0) rotate(0);
        }
    }

    @keyframes italic-letter-enter {
        0% {
            opacity: 0;
            transform: translate(-3px, 3px) rotate(12deg);
        }

        60% {
            opacity: 1;
            transform: translate(1.5px, -1.5px) rotate(-8deg);
        }

        100% {
            transform: translate(0, 0) rotate(0);
        }
    }

    @keyframes bold-letter-enter {
        0% {
            opacity: 0;
            transform: translate(-2px, -2px) scale(1.5) rotate(10deg);
        }

        40% {
            transform: translate(1px, 0.5px) scale(1.5) rotate(10deg);
        }

        60% {
            transform: translate(-0.5px, 0) scale(0.9) rotate(-2deg);
        }

        100% {
            opacity: 1;
            transform: translate(0, 0) scale(1);
        }
    }
</style>
<script>
    import {
        Renderer,
        type ChoiceContainer,
        type ContentContainer,
    } from "../lib/client/renderer";
    import {
        HttpSceneDb,
        LocalStorageSaveDb,
        State,
        type StateOptions,
    } from "../lib/client/state";

    function initDialogueColumn() {
        const content = document.querySelector("[data-content]") as HTMLElement;
        const options = content.dataset.stateOptions as Partial<StateOptions>;

        const saveDb = new LocalStorageSaveDb();
        const sceneDb = new HttpSceneDb();

        const contentContainer: ContentContainer = {
            clear: () => (content.innerHTML = ""),
            add: (el) => content.appendChild(el),
            scrollToEnd: () => {},
        };

        const choiceContainer: ChoiceContainer = {
            ...contentContainer,
            clear: () => {
                content
                    .querySelectorAll("button.choice")
                    .forEach((n) => n.remove());
            },
        };

        const state = new State({ saveDb, sceneDb }, options);
        const renderer = new Renderer({
            state,
            contentContainer,
            choiceContainer,
        });

        renderer.begin();
    }

    document.addEventListener("DOMContentLoaded", initDialogueColumn);
</script>
