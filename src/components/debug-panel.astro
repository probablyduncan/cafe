---
import NodeSearch from "./node-search.astro";

const variables = [
    ["old_man_convo:wavedAtOldMan", true],
    ["old_man_convo:ignoredOldMan", false],
    ["old_man_convo:cowboy", true],
    ["morning_start:bristly", true],
];
const choiceHistory = [
    ["old_man_convo:34c2", "Say goodbye."],
    ["old_man_convo:c1", "Ask about the weather."],
    ["old_man_convo:c0", "Comment on his knee."],
    ["inside:c17", "Approach the old man."],
    ["inside:c14", "Wander around, aimless."],
];
---

<NodeSearch />
<aside>
    <h2>*Debug Panel*</h2>

    <details open data-choice-history>
        <summary>Choice History</summary>
        <!-- <button data-go-to-choice="ignore">
            <span>Ignore him</span>
            <span></span>
            <span>↩</span>
        </button> -->
    </details>

    <details open data-state-vars>
        <summary>State Variables</summary>
        <label
            ><input type="checkbox" checked="True" />old_man_convo:waved</label
        >
        <label
            ><input
                type="checkbox"
                checked="False"
            />old_man_convo:ignored</label
        >
    </details>

    <details open>
        <summary>Actions</summary>
        <button
            style="text-decoration: underline dotted; cursor: pointer;"
            onclick="window.localStorage.removeItem('save-data'); window.location.reload();"
        >
            Clear state and restart
        </button>
    </details>
</aside>
<style>
    aside {
        /* resize: horizontal; */
        overflow: scroll;

        width: 100%;
        max-width: 65ch;
        height: 100svh;

        box-sizing: border-box;
        padding: 1rem;
        border-left: 2px solid var(--text-color);
    }

    details {
        display: flex;
        flex-direction: column;
    }

    details:not(:has(:not(summary))) {
        display: none;
    }

    summary {
        margin: 1em 0 0.5em;
        font-size: 1.125em;
        font-weight: bold;
    }

    label,
    input {
        cursor: pointer;
    }

    details[data-choice-history] button {
        border: unset;
        background: unset;
        font-family: unset;
        font-size: unset;
        padding: 0;
        margin: 0;
        cursor: pointer;

        display: grid;
        grid-template-columns: auto 1fr auto;
        transition: column-gap 0.2s;
        column-gap: 1em;
        width: 100%;

        & > span:nth-child(2) {
            transition: border-bottom-style 0.2s;
            border-bottom: 1px dotted currentColor;
            height: 0.8em;
        }

        & > span:nth-child(3) {
            display: inline-block;
            transition: transform 0.2s;
        }

        &:hover {
            column-gap: 0.5em;
            font-style: italic;

            span:nth-child(2) {
                border-bottom-width: 0.5px;
                border-bottom-style: solid;
            }

            span:nth-child(3) {
                /* transform: rotate(-30deg) scale(1.1); */
            }
        }
    }
</style>
<script>
    import { events } from "../lib/client/events";
    import type { NodePosition, RenderableChoice } from "../lib/contentSchemaTypes";

    function initDebug() {
        events.on("choose", (e) => addChoiceMade(e.choiceNode));
    }

    function addChoiceMade(choiceNode: RenderableChoice) {
        const el = document.querySelector("details[data-choice-history]");
        if (!el) {
            return;
        }

        const button = document.createElement("button");
        button.addEventListener("click", () => goBackToChoice(choiceNode));
        button.innerHTML = `<span>${choiceNode.html}</span><span></span><span>↩</span>`;
        el.appendChild(button);
    }

    function goBackToChoice(pos: NodePosition) {
        // events.fire("goto", { pos });
    }

    events.on("setupComplete", initDebug);
</script>
