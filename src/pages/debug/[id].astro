---
import "../../style.css";
import { getStaticPathsImpl, type StaticPathProps } from "../../lib/server/getStaticPaths";
import type { GetStaticPaths } from "astro";

export const getStaticPaths = (async () => {
    return await getStaticPathsImpl();
}) satisfies GetStaticPaths;

const { id, data } = Astro.props as StaticPathProps;
---

<!doctype html>
<html lang="en">
    <head>
        <title>Cafe Halcyon</title>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
    </head>
    <body>
        <nav>
            <a href="/info" title="about this cafe">info</a>
            <!-- <span><span data-time></span> at the Cafe Halcyon</span> -->
            <span style="font-family: monospace;">~ debugging {id}.mmd ~</span>
            <a href="/ctrl" title="settings & save files">ctrl</a>
        </nav>
        <div data-content={JSON.stringify(data)}></div>
        <div data-choices></div>
    </body>
</html>
<script>
    import type {
        Scene,
        SceneChild,
        SceneNode,
    } from "../../lib/contentSchemaTypes";
    import type { StateCondition } from "../../lib/contentSchemaTypes";

    const ms = async (ms: number) => new Promise((res) => setTimeout(res, ms));

    async function again() {
        const dialogueContainer = document.querySelector(
            "[data-content]",
        ) as HTMLElement;
        const choicesContainer = document.querySelector(
            "[data-choices]",
        ) as HTMLElement;

        if (
            !dialogueContainer ||
            !dialogueContainer.dataset.content ||
            !choicesContainer
        ) {
            return;
        }

        const startScene = JSON.parse(dialogueContainer.dataset.content) as Scene;
        const startPos = [startScene.sceneId, startScene.entryNodeId!];
        
        const state = {
            keys: new Set<string>(),
            choicesMade: new Map<string, Set<string>>(),
            scenePath: [startPos],
        }
        const _sceneCache = new Map<string, Scene>();

        const getCurrentSceneId = (): string => state.scenePath.at(-1)![0]!;
        const getCurrentScene = async (): Promise<Scene> => await getOrFetchScene(getCurrentSceneId())!;
        
        _sceneCache.set(getCurrentSceneId(), startScene);
        state.choicesMade.set(getCurrentSceneId(), new Set<string>());
        
        console.log(await getCurrentScene());
        
        renderNode(startScene.nodes[startScene.entryNodeId]);

        async function getOrFetchScene(key: string): Promise<Scene> {
            if (_sceneCache.has(key)) {
                return _sceneCache.get(key)!;
            }

            const response = await fetch(`/api/scenes/${key}.json`);
            const scene = (await response.json()) as Scene;
            _sceneCache.set(key, scene);
            return scene;
        }

        async function renderNode(node: SceneNode) {
            switch (node.type) {
                case "text":
                    await renderTextNode(node);
                    await renderChildren(node.children);
                    break;
                case "choice":
                    await renderChoiceNode(node);
                    break;
                case "scene":
                    const scene = await getOrFetchScene(node.sceneId);
                    state.scenePath.push([node.sceneId, node.nodeId]);
                    renderNode(scene.nodes[scene.entryNodeId]);
                    break;
                case "image":
                    await renderImageNode(node);
                    await renderChildren(node.children);
                    break;
                case "passthrough":
                default:
                    await renderChildren(node.children);
                    break;
            }
        }

        async function renderTextNode(node: Extract<SceneNode, { type: "text" }>) {
            const el = document.createElement("p");
            el.classList.add(node.type);
            el.innerHTML = node.html;

            el.style.transition = "opacity 1s, transform 1s";
            el.style.opacity = "0";
            el.style.transform = "translateY(10px)";
            dialogueContainer.appendChild(el);

            await ms(1);

            el.style.opacity = "1";
            el.style.transform = "translateY(0px)";

            await ms(1000);

            if (node.setState) {
                setStateCondition(node.setState);
            }
        }

        async function renderChoiceNode(node: Extract<SceneNode, { type: "choice" }>) {
            const el = document.createElement("button");
            el.classList.add("choice");
            el.innerHTML = node.html;

            if (state.choicesMade.get(getCurrentSceneId())?.has(node.nodeId)) {
                el.classList.add("visited");
            }

            el.onclick = () => {
                
                dialogueContainer.innerHTML = "";
                choicesContainer.innerHTML = "";

                if (node.setState) {
                    setStateCondition(node.setState);
                }
                state.choicesMade.get(getCurrentSceneId())?.add(node.nodeId);

                console.log(state.keys);
                console.log(state.choicesMade);

                renderChildren(node.children);
            };
            choicesContainer.appendChild(el);
        }

        async function renderImageNode(node: Extract<SceneNode, { type: "image" }>) {
            const img = document.createElement("img");
            img.src = "/cafe/assets/images/" + node.src;
            img.alt = node.alt;
            img.style.width = "100%";

            dialogueContainer.appendChild(img);

            await ms(1000);

            if (node.setState) {
                setStateCondition(node.setState);
            }
        }

        async function renderNodeDelay(delay: SceneChild["delay"]) {
            if (delay === undefined) {
                return;
            }

            for (let i = 0; i < delay.cycles; i++) {
                await ms(100);
            }
        }

        async function renderChild(child: SceneChild) {
            if (!isRequiredConditionMet(child.requiredState)) {
                return;
            }

            if (child.clearPrevious) {
                dialogueContainer.innerHTML = "";
            }

            if (child.delay !== undefined) {
                await renderNodeDelay(child.delay);
            }

            const node = (await getCurrentScene()).nodes[child.nodeId];
            renderNode(node);
        }

        async function renderChildren(children: SceneChild[]) {
            if (children.length) {
                children.forEach(renderChild);
            }
            else if (state.scenePath.length > 1) {
                // otherwise, get parent scene and render children of scene node
                state.scenePath.pop();
                const newScene = await getCurrentScene();
                const [_, startNodeId] = state.scenePath.at(-1)!;
                const startNode = newScene.nodes[startNodeId]!;
                renderChildren(startNode.children);
            }
        }

        function isRequiredConditionMet(
            requiredCondition: StateCondition | undefined,
        ) {
            if (requiredCondition === undefined) {
                return true;
            }

            const { name, negated } = requiredCondition;

            // if not negated, condition is met when key in state
            // if negated, condition is met when key NOT in state
            return state.keys.has(name) !== negated;
        }

        function setStateCondition(stateCondition: StateCondition | undefined) {
            if (stateCondition === undefined) {
                return;
            }

            if (stateCondition.negated) {
                state.keys.delete(stateCondition.name);
            } else {
                state.keys.add(stateCondition.name);
            }
        }
    }

    document.addEventListener("DOMContentLoaded", again);
</script>
